{
  "name": "recursivefunk/dionne-davenport",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Dionne Davenport",
  "branch": "master",
  "style": {
    "name": "Material",
    "componentSet": {
      "nav": "nav/DarkAbsoluteNav",
      "header": "header/GradientHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Roboto, sans-serif",
    "heading": {
      "fontWeight": 500,
      "letterSpacing": "-0.01em"
    },
    "colors": {
      "text": "#212121",
      "background": "#fff",
      "primary": "#2196f3",
      "secondary": "#1565c0",
      "highlight": "#ff4081",
      "border": "#e0e0e0",
      "muted": "#f5f5f5"
    },
    "layout": {
      "centered": true,
      "bannerHeight": "80vh",
      "maxWidth": 896
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/recursivefunk/dionne-davenport",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/dionne-davenport",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "dionne-davenport",
      "subhead": "PostgreSQL backed key/val store with support for JSON values",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "dionne-davenport: PostgreSQL backed key/val store with support for JSON values",
          "url": ""
        },
        {
          "component": "ui/GithubButton",
          "user": "recursivefunk",
          "repo": "dionne-davenport"
        }
      ],
      "text": "v2.0.0"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h2>Dionne Davenport</h2>\n<p><a href=\"https://circleci.com/gh/recursivefunk/dionne-davenport/\"><img src=\"https://circleci.com/gh/recursivefunk/dionne-davenport.png?circle-token=b071c5f82e8c33880dc87eb169d67434c65531b0\"></a></p>\n<p><a href=\"http://standardjs.com\"><img src=\"https://cdn.rawgit.com/feross/standard/master/badge.svg\"></a></p>\n<p><img src=\"http://i.imgur.com/yh2In1R.gif\"></p>\n<p>Essentially hstore with JSON val</p>\n<pre>$ npm install dionne-daven<span class=\"hljs-keyword\">port</span> <span class=\"hljs-comment\">--save</span></pre><p>Basic setting/getting</p>\n<pre><span class=\"hljs-keyword\">const</span> Dionne = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;dionne-davenport&apos;</span>)\n<span class=\"hljs-keyword\">const</span> opts = {\n  <span class=\"hljs-attr\">appName</span>: <span class=\"hljs-string\">&apos;myApp&apos;</span>,\n  <span class=\"hljs-attr\">url</span>: process.env.DATABASE_URL\n}\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">await</span> Dionne(opts)\n<span class=\"hljs-keyword\">await</span> store.set(<span class=\"hljs-string\">&apos;as&apos;</span>, <span class=\"hljs-string\">&apos;if&apos;</span>)\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> store.get(<span class=\"hljs-string\">&apos;as&apos;</span>)\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// &apos;if&apos;</span></pre><p>Batch setting/getting</p>\n<pre><span class=\"hljs-keyword\">const</span> items = {\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&apos;bar&apos;</span>,\n  <span class=\"hljs-attr\">ping</span>: {\n    <span class=\"hljs-attr\">beep</span>: [ <span class=\"hljs-string\">&apos;boop&apos;</span>, <span class=\"hljs-string\">&apos;bop&apos;</span> ]\n  }\n}\n<span class=\"hljs-keyword\">await</span> store.setAll(items)\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> store.getAll(<span class=\"hljs-built_in\">Object</span>.keys(items))\n<span class=\"hljs-built_in\">console</span>.log(result)\n<span class=\"hljs-comment\">/*\n{\n  foo: &apos;bar&apos;,\n  ping: {\n    beep: [ &apos;boop&apos;, &apos;bop&apos; ]\n  }\n}\n*/</span></pre><p>Deletion</p>\n<pre><span class=\"hljs-keyword\">let</span> item\n<span class=\"hljs-keyword\">await</span> store.set(<span class=\"hljs-string\">&apos;delMe&apos;</span>, <span class=\"hljs-string\">&apos;foo&apos;</span>)\nitem = <span class=\"hljs-keyword\">await</span> store.get(<span class=\"hljs-string\">&apos;delMe&apos;</span>)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;delMe&apos;</span>) <span class=\"hljs-comment\">// foo</span>\n\n<span class=\"hljs-keyword\">await</span> store.del(<span class=\"hljs-string\">&apos;delMe&apos;</span>)\nitem = <span class=\"hljs-keyword\">await</span> store.get(<span class=\"hljs-string\">&apos;delMe&apos;</span>)\n<span class=\"hljs-built_in\">console</span>.log(item) <span class=\"hljs-comment\">// undefined</span></pre><h3>Tests</h3>\n<p>Create your test PostgresSQL database and user and create a test.env file for environment constiables</p>\n<pre>$ createuser myApp\n$ createdb myApp\n$ echo <span class=\"hljs-string\">&quot;DATABASE_URL=postgres://myApp:Ffoodk@localhost:5432/myApp&quot;</span> <span class=\"hljs-meta\">&gt;&gt; </span>test/test.env\n$ echo <span class=\"hljs-string\">&quot;NODE_ENV=test&quot;</span> <span class=\"hljs-meta\">&gt;&gt; </span>test/test.env\n$ echo <span class=\"hljs-string\">&quot;APP_NAME=appName&quot;</span> <span class=\"hljs-meta\">&gt;&gt; </span>test/test.env\n$ npm test</pre>"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/recursivefunk/dionne-davenport",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/recursivefunk",
          "text": "recursivefunk"
        }
      ]
    }
  ]
}